"""SQLAlchemy mixins for common model patterns.

These mixins implement DRY principle by extracting repeated patterns:
- UUIDPrimaryKeyMixin: Standardized UUID primary keys
- TimestampMixin: Audit timestamps (created_at, updated_at)
- SoftDeletableMixin: Extends TimestampMixin with soft delete support
- SearchableMixin: PostgreSQL full-text search integration
"""

from sqlalchemy import TIMESTAMP, Column, String
from sqlalchemy.dialects.postgresql import TSVECTOR
from sqlalchemy.sql import func

from app.core.uuid_utils import generate_uuid


class UUIDPrimaryKeyMixin:
    """Mixin providing UUID string primary key.

    Uses String(36) for SQLite compatibility.
    Auto-generates UUID4 values on creation.
    """

    id = Column(String(36), primary_key=True, default=generate_uuid)


class TimestampMixin:
    """Mixin providing audit timestamp columns.

    Automatically tracks:
    - created_at: Set on insert (server default)
    - updated_at: Set on insert, updated via BaseRepository.update()
    """

    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=False, server_default=func.now())


class SoftDeletableMixin(TimestampMixin):
    """Mixin extending TimestampMixin with soft delete support.

    Adds deleted_at column for soft delete functionality.
    BaseRepository methods automatically filter deleted entities.
    """

    deleted_at = Column(TIMESTAMP, nullable=True)


class SearchableMixin:
    """Mixin providing PostgreSQL full-text search support.

    Models using this mixin should define __search_fields__ to specify
    which fields to include in search and their weights.

    Search Weight Convention:
        - 'A': Primary field (highest weight) - typically title/name
        - 'B': Secondary field (medium weight) - typically description/content
        - 'C': Tertiary field (low weight) - additional context
        - 'D': Quaternary field (lowest weight) - supplementary information

    By convention, all searchable models in this project use:
        - Weight 'A' for the primary title/name field
        - Weight 'B' for the main content/description field

    Example:
        class Task(Base, SearchableMixin):
            __search_fields__ = {
                'title': 'A',        # Primary field (highest weight)
                'description': 'B'   # Secondary field (medium weight)
            }

    Adds:
    - search_vector: TSVECTOR column (generated by DB)
    - __mapper_args__: Excludes search_vector from INSERT/UPDATE
    - __search_fields__: Configuration for search field weights

    Note: Requires database GENERATED column definition in migration.
    See alembic/utils/search_helpers.py for migration helper functions.
    """

    search_vector = Column(TSVECTOR)
    __mapper_args__ = {"exclude_properties": ["search_vector"]}

    # Subclasses override this to configure searchable fields
    __search_fields__: dict[str, str] = {}

    @classmethod
    def get_search_config(cls) -> dict[str, str]:
        """Return search field configuration for this model.

        Returns:
            dict: Mapping of field names to search weights ('A', 'B', 'C', etc.)

        Raises:
            NotImplementedError: If __search_fields__ not defined in subclass
        """
        if not cls.__search_fields__:
            raise NotImplementedError(
                f"{cls.__name__} must define __search_fields__ when using SearchableMixin"
            )
        return cls.__search_fields__
