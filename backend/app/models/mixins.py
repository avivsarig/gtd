"""SQLAlchemy mixins for common model patterns.

These mixins implement DRY principle by extracting repeated patterns:
- UUIDPrimaryKeyMixin: Standardized UUID primary keys
- TimestampMixin: Audit timestamps (created_at, updated_at)
- SoftDeletableMixin: Extends TimestampMixin with soft delete support
- SearchableMixin: PostgreSQL full-text search integration
"""

from uuid import uuid4

from sqlalchemy import TIMESTAMP, Column, String
from sqlalchemy.dialects.postgresql import TSVECTOR
from sqlalchemy.sql import func


class UUIDPrimaryKeyMixin:
    """Mixin providing UUID string primary key.

    Uses String(36) for SQLite compatibility.
    Auto-generates UUID4 values on creation.
    """

    id = Column(String(36), primary_key=True, default=lambda: str(uuid4()))


class TimestampMixin:
    """Mixin providing audit timestamp columns.

    Automatically tracks:
    - created_at: Set on insert (server default)
    - updated_at: Set on insert, updated via BaseRepository.update()
    """

    created_at = Column(TIMESTAMP, nullable=False, server_default=func.now())
    updated_at = Column(TIMESTAMP, nullable=False, server_default=func.now())


class SoftDeletableMixin(TimestampMixin):
    """Mixin extending TimestampMixin with soft delete support.

    Adds deleted_at column for soft delete functionality.
    BaseRepository methods automatically filter deleted entities.
    """

    deleted_at = Column(TIMESTAMP, nullable=True)


class SearchableMixin:
    """Mixin providing PostgreSQL full-text search support.

    Adds:
    - search_vector: TSVECTOR column (generated by DB trigger)
    - __mapper_args__: Excludes search_vector from INSERT/UPDATE

    Note: Requires database-side trigger to populate search_vector.
    See migrations for trigger definitions.
    """

    search_vector = Column(TSVECTOR)

    # Exclude generated column from ORM operations
    __mapper_args__ = {"exclude_properties": ["search_vector"]}
